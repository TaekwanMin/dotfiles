#compdef lab
function _lab {
  local -a commands
  # shellcheck disable=SC2206
  local -a -x os_args=(${words})

  _arguments -C \
    "--version[Show the lab version]" \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "ci:Work with GitLab CI pipelines and jobs"
        "clone:GitLab repo aware clone command"
        "completion:Generates the shell autocompletion [bash, elvish, fish, powershell, zsh]"
        "fork:Fork a remote repository on GitLab and add as remote"
        "help:Show the help for lab"
        "issue:Describe, list, and create issues"
        "label:List and search labels"
        "merge-request:Open a merge request on GitLab"
        "mr:Describe, list, and create merge requests"
        "project:Perform project level operations on GitLab"
        "repo:Perform project level operations on GitLab"
        "snippet:Create a personal or project snippet"
        "snip:Create a personal or project snippet"
        "version:"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    ci)
      _lab__ci
      ;;
    clone)
      _lab__clone
      ;;
    completion)
      _lab__completion
      ;;
    fork)
      _lab__fork
      ;;
    help)
      _lab__help
      ;;
    issue)
      _lab__issue
      ;;
    label)
      _lab__label
      ;;
    merge-request)
      _lab__merge-request
      ;;
    mr)
      _lab__mr
      ;;
    project)
      _lab__project
      ;;
    repo)
      _lab__project
      ;;
    snippet)
      _lab__snippet
      ;;
    snip)
      _lab__snippet
      ;;
    version)
      _lab__version
      ;;
  esac
}

function _lab__ci {
  local -a commands
  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "create:Create a CI pipeline"
        "run:Create a CI pipeline"
        "lint:Validate .gitlab-ci.yml against GitLab"
        "status:Textual representation of a CI pipeline"
        "run:Textual representation of a CI pipeline"
        "trace:Trace the output of a ci job"
        "logs:Trace the output of a ci job"
        "trigger:Trigger a CI pipeline"
        "view:View, run, trace, and/or cancel CI jobs current pipeline"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    create)
      _lab__ci__create
      ;;
    run)
      _lab__ci__create
      ;;
    lint)
      _lab__ci__lint
      ;;
    status)
      _lab__ci__status
      ;;
    run)
      _lab__ci__status
      ;;
    trace)
      _lab__ci__trace
      ;;
    logs)
      _lab__ci__trace
      ;;
    trigger)
      _lab__ci__trigger
      ;;
    view)
      _lab__ci__view
      ;;
  esac
}

function _lab__ci__create {
    _arguments -C \
    "(-p --project)"{-p,--project}"[Project to create pipeline on]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__ci__create#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__ci__lint {
    _arguments -C \
    "1: :_files -g '*.gitlab-ci.yml'"
}

function _lab__ci__status {
    _arguments -C \
    "--wait[Continuously print the status and wait to exit until the pipeline finishes. Exit code indicates pipeline status]" \
    "1: : eval \$(lab _carapace zsh '_lab__ci__status#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__ci__status#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__ci__trace {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__ci__trace#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__ci__trace#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__ci__trigger {
    _arguments -C \
    "(-p --project)"{-p,--project}"[Project to run pipeline trigger on]: :" \
    "(-t --token)"{-t,--token}"[Pipeline trigger token, optional if run within GitLabCI]: :" \
    "(*-v *--variable)"{\*-v,\*--variable}"[Variables to pass to pipeline]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__ci__trigger#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__ci__view {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__ci__view#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__ci__view#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__clone {
    _arguments -C \
    "*::arg:->args"
}

function _lab__completion {
    _arguments -C \
    "(-h --help)"{-h,--help}"[help for completion]" \
    "1: :_values '' bash elvish fish powershell zsh" \
    "*::arg:->args"
}

function _lab__fork {
    _arguments -C \
    "(-s --skip-clone)"{-s,--skip-clone}"[Skip clone after remote fork]" \
    "*::arg:->args"
}

function _lab__help {
    _arguments -C \
    "*::arg:->args"
}

function _lab__issue {
  local -a commands
  _arguments -C \
    "(-b --browse)"{-b,--browse}"[View issue <id> in a browser]" \
    "(-d --close)"{-d,--close}"[Close issue <id> on remote]: :" \
    "(-l --list)"{-l,--list}"[List issues on a remote]" \
    "(-M --no-markdown)"{-M,--no-markdown}"[Don't use markdown renderer to print the issue description]" \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "browse:View issue in a browser"
        "b:View issue in a browser"
        "close:Close issue by id"
        "delete:Close issue by id"
        "create:Open an issue on GitLab"
        "new:Open an issue on GitLab"
        "edit:Edit or update an issue"
        "update:Edit or update an issue"
        "list:List issues"
        "ls:List issues"
        "search:List issues"
        "note:Add a note or comment to an issue on GitLab"
        "comment:Add a note or comment to an issue on GitLab"
        "show:Describe an issue"
        "get:Describe an issue"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    browse)
      _lab__issue__browse
      ;;
    b)
      _lab__issue__browse
      ;;
    close)
      _lab__issue__close
      ;;
    delete)
      _lab__issue__close
      ;;
    create)
      _lab__issue__create
      ;;
    new)
      _lab__issue__create
      ;;
    edit)
      _lab__issue__edit
      ;;
    update)
      _lab__issue__edit
      ;;
    list)
      _lab__issue__list
      ;;
    ls)
      _lab__issue__list
      ;;
    search)
      _lab__issue__list
      ;;
    note)
      _lab__issue__note
      ;;
    comment)
      _lab__issue__note
      ;;
    show)
      _lab__issue__show
      ;;
    get)
      _lab__issue__show
      ;;
  esac
}

function _lab__issue__browse {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__issue__browse#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__issue__browse#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__issue__close {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__issue__close#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__issue__close#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__issue__create {
    _arguments -C \
    "(*-a *--assignees)"{\*-a,\*--assignees}"[Set assignees by username]: :" \
    "(*-l *--label)"{\*-l,\*--label}"[Set the given label(s) on the created issue]: :" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "(-t --template)"{-t,--template}"[use the given issue template]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__issue__create#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__issue__create#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__issue__edit {
    _arguments -C \
    "(*-a *--assign)"{\*-a,\*--assign}"[Add an assignee by username]: :" \
    "(*-l *--label)"{\*-l,\*--label}"[Add the given label(s) to the issue]: :" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "*--unassign[Remove an assigne by username]: :" \
    "*--unlabel[Remove the given label(s) from the issue]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__issue__edit#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__issue__edit#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__issue__list {
    _arguments -C \
    "(-a --all)"{-a,--all}"[List all issues on the project]" \
    "(*-l *--label)"{\*-l,\*--label}"[Filter issues by label]: :" \
    "(-n --number)"{-n,--number}"[Number of issues to return]: :" \
    "(-s --state)"{-s,--state}"[Filter issues by state (opened/closed)]: :_values '' opened closed" \
    "1: : eval \$(lab _carapace zsh '_lab__issue__list#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__issue__note {
    _arguments -C \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "*::arg:->args"
}

function _lab__issue__show {
    _arguments -C \
    "(-c --comments)"{-c,--comments}"[Show comments for the issue]" \
    "(-M --no-markdown)"{-M,--no-markdown}"[Don't use markdown renderer to print the issue description]" \
    "(-s --since)"{-s,--since}"[Show comments since specified date (format\: 2020-08-21 14\:57\:46.808 +0000 UTC)]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__issue__show#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__issue__show#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__label {
  local -a commands
  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "list:List labels"
        "ls:List labels"
        "search:List labels"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    list)
      _lab__label__list
      ;;
    ls)
      _lab__label__list
      ;;
    search)
      _lab__label__list
      ;;
  esac
}

function _lab__label__list {
    _arguments -C \
    "*::arg:->args"
}

function _lab__merge-request {
    _arguments -C \
    "--allow-collaboration[Allow commits from other members]" \
    "(*-a *--assignee)"{\*-a,\*--assignee}"[Set assignee by username; can be specified multiple times for multiple assignees]: :" \
    "(-F --file)"{-F,--file}"[Use the given file as the Description]: :" \
    "(*-l *--label)"{\*-l,\*--label}"[Add label <label>; can be specified multiple times for multiple labels]: :" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "--milestone[Set milestone by milestone ID]: :" \
    "(-d --remove-source-branch)"{-d,--remove-source-branch}"[Remove source branch from remote after merge]" \
    "(-s --squash)"{-s,--squash}"[Squash commits when merging]" \
    "1: : eval \$(lab _carapace zsh '_lab__merge-request#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__merge-request#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr {
  local -a commands
  _arguments -C \
    "(-b --browse)"{-b,--browse}"[View merge request <id> in a browser]" \
    "(-d --close)"{-d,--close}"[Close merge request <id> on remote]: :" \
    "(-l --list)"{-l,--list}"[List merge requests on a remote]" \
    "(-M --no-markdown)"{-M,--no-markdown}"[Don't use markdown renderer to print the issue description]" \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "approve:Approve merge request"
        "browse:View merge request in a browser"
        "b:View merge request in a browser"
        "checkout:Checkout an open merge request"
        "close:Close merge request"
        "delete:Close merge request"
        "create:Open a merge request on GitLab"
        "new:Open a merge request on GitLab"
        "list:List merge requests"
        "ls:List merge requests"
        "merge:Merge an open merge request"
        "delete:Merge an open merge request"
        "note:Add a note or comment to an MR on GitLab"
        "comment:Add a note or comment to an MR on GitLab"
        "rebase:Rebase an open merge request"
        "delete:Rebase an open merge request"
        "show:Describe a merge request"
        "get:Describe a merge request"
        "thumb:Thumb operations on merge requests"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    approve)
      _lab__mr__approve
      ;;
    browse)
      _lab__mr__browse
      ;;
    b)
      _lab__mr__browse
      ;;
    checkout)
      _lab__mr__checkout
      ;;
    close)
      _lab__mr__close
      ;;
    delete)
      _lab__mr__close
      ;;
    create)
      _lab__mr__create
      ;;
    new)
      _lab__mr__create
      ;;
    list)
      _lab__mr__list
      ;;
    ls)
      _lab__mr__list
      ;;
    merge)
      _lab__mr__merge
      ;;
    delete)
      _lab__mr__merge
      ;;
    note)
      _lab__mr__note
      ;;
    comment)
      _lab__mr__note
      ;;
    rebase)
      _lab__mr__rebase
      ;;
    delete)
      _lab__mr__rebase
      ;;
    show)
      _lab__mr__show
      ;;
    get)
      _lab__mr__show
      ;;
    thumb)
      _lab__mr__thumb
      ;;
  esac
}

function _lab__mr__approve {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__approve#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__approve#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__browse {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__browse#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__browse#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__checkout {
    _arguments -C \
    "(-b --branch)"{-b,--branch}"[checkout merge request with <branch> name]: :" \
    "(-t --track)"{-t,--track}"[set checked out branch to track mr author remote branch, adds remote if needed]" \
    "1: : eval \$(lab _carapace zsh '_lab__mr__checkout#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__close {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__close#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__close#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__create {
    _arguments -C \
    "--allow-collaboration[Allow commits from other members]" \
    "(*-a *--assignee)"{\*-a,\*--assignee}"[Set assignee by username; can be specified multiple times for multiple assignees]: :" \
    "(-F --file)"{-F,--file}"[Use the given file as the Description]: :" \
    "(*-l *--label)"{\*-l,\*--label}"[Add label <label>; can be specified multiple times for multiple labels]: :" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "--milestone[Set milestone by milestone ID]: :" \
    "(-d --remove-source-branch)"{-d,--remove-source-branch}"[Remove source branch from remote after merge]" \
    "(-s --squash)"{-s,--squash}"[Squash commits when merging]" \
    "1: : eval \$(lab _carapace zsh '_lab__mr__create#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__create#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__list {
    _arguments -C \
    "(-a --all)"{-a,--all}"[List all MRs on the project]" \
    "--assignee[List only MRs assigned to $username]: :" \
    "(*-l *--label)"{\*-l,\*--label}"[filter merge requests by label]: :" \
    "(-m --mine)"{-m,--mine}"[List only MRs assigned to me]" \
    "(-n --number)"{-n,--number}"[number of merge requests to return]: :" \
    "(-s --state)"{-s,--state}"[filter merge requests by state (opened/closed/merged)]: :_values '' opened closed merged" \
    "(-t --target-branch)"{-t,--target-branch}"[filter merge requests by target branch]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__mr__list#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__merge {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__merge#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__merge#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__note {
    _arguments -C \
    "(-F --file)"{-F,--file}"[Use the given file as the message]: :" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__mr__note#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__note#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__rebase {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__rebase#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__rebase#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__show {
    _arguments -C \
    "(-c --comments)"{-c,--comments}"[Show comments for the merge request]" \
    "(-M --no-markdown)"{-M,--no-markdown}"[Don't use markdown renderer to print the issue description]" \
    "(-s --since)"{-s,--since}"[Show comments since specified date (format\: 2020-08-21 14\:57\:46.808 +0000 UTC)]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__mr__show#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__show#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__thumb {
  local -a commands
  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "down:Thumbs down merge request"
        "up:Thumb up merge request"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    down)
      _lab__mr__thumb__down
      ;;
    up)
      _lab__mr__thumb__up
      ;;
  esac
}

function _lab__mr__thumb__down {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__thumb__down#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__thumb__down#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__mr__thumb__up {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__mr__thumb__up#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__mr__thumb__up#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__project {
  local -a commands
  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "browse:View project in a browser"
        "b:View project in a browser"
        "create:Create a new project on GitLab"
        "list:List your projects"
        "ls:List your projects"
        "search:List your projects"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    browse)
      _lab__project__browse
      ;;
    b)
      _lab__project__browse
      ;;
    create)
      _lab__project__create
      ;;
    list)
      _lab__project__list
      ;;
    ls)
      _lab__project__list
      ;;
    search)
      _lab__project__list
      ;;
  esac
}

function _lab__project__browse {
    _arguments -C \
    "*::arg:->args"
}

function _lab__project__create {
    _arguments -C \
    "(-d --description)"{-d,--description}"[description of the new project]: :" \
    "--internal[Make project internal\: visible to any authenticated user (default)]" \
    "(-n --name)"{-n,--name}"[name of the new project]: :" \
    "(-p --private)"{-p,--private}"[Make project private\: visible only to project members]" \
    "--public[Make project public\: visible without any authentication]" \
    "*::arg:->args"
}

function _lab__project__list {
    _arguments -C \
    "(-a --all)"{-a,--all}"[List all projects on the instance]" \
    "--member[limit by projects which you are a member]" \
    "(-m --mine)"{-m,--mine}"[limit by your projects]" \
    "(-n --number)"{-n,--number}"[Number of projects to return]: :" \
    "--starred[limit by your starred projects]" \
    "*::arg:->args"
}

function _lab__snippet {
  local -a commands
  _arguments -C \
    "(-b --browse)"{-b,--browse}"[browse snippets]" \
    "(-d --delete)"{-d,--delete}"[delete snippet with id]: :" \
    "(-g --global)"{-g,--global}"[create as a personal snippet]" \
    "(-l --list)"{-l,--list}"[list snippets]" \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "(-n --name)"{-n,--name}"[(optional) Name snippet to add code highlighting, e.g. potato.go for GoLang]: :" \
    "(-p --private)"{-p,--private}"[Make snippet private; visible only to project members (default\: internal)]" \
    "--public[Make snippet public; can be accessed without any authentication (default\: internal)]" \
    "1: :->cmnds" \
    "*::arg:->args"

  # shellcheck disable=SC2154
  case $state in
    cmnds)
      # shellcheck disable=SC2034
      commands=(
        "browse:View personal or project snippet in a browser"
        "create:Create a personal or project snippet"
        "delete:Delete a project or personal snippet"
        "list:List personal or project snippets"
        "ls:List personal or project snippets"
      )
      _describe "command" commands
      ;;
  esac
  
  case "${words[1]}" in
    browse)
      _lab__snippet__browse
      ;;
    create)
      _lab__snippet__create
      ;;
    delete)
      _lab__snippet__delete
      ;;
    list)
      _lab__snippet__list
      ;;
    ls)
      _lab__snippet__list
      ;;
  esac
}

function _lab__snippet__browse {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__snippet__browse#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__snippet__browse#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__snippet__create {
    _arguments -C \
    "(*-m *--message)"{\*-m,\*--message}"[Use the given <msg>; multiple -m are concatenated as separate paragraphs]: :" \
    "(-n --name)"{-n,--name}"[(optional) Name snippet to add code highlighting, e.g. potato.go for GoLang]: :" \
    "(-p --private)"{-p,--private}"[Make snippet private; visible only to project members (default\: internal)]" \
    "--public[Make snippet public; can be accessed without any authentication (default\: internal)]" \
    "1: : eval \$(lab _carapace zsh '_lab__snippet__create#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__snippet__delete {
    _arguments -C \
    "1: : eval \$(lab _carapace zsh '_lab__snippet__delete#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})" \
    "2: : eval \$(lab _carapace zsh '_lab__snippet__delete#2' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__snippet__list {
    _arguments -C \
    "(-a --all)"{-a,--all}"[List all snippets]" \
    "(-n --number)"{-n,--number}"[Number of snippets to return]: :" \
    "1: : eval \$(lab _carapace zsh '_lab__snippet__list#1' ${${os_args:1:gs/\"/\\\"}:gs/\'/\\\"})"
}

function _lab__version {
    _arguments -C \
    "*::arg:->args"
}
if compquote '' 2>/dev/null; then _lab; else compdef _lab lab; fi

